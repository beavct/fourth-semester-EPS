/* MODIFICAÇÕES: TIPOS */
<idChars>       ::= <letter> | <digit>

/* BOOLEANO */
<bool>          ::= "true" | "false"

/* NOT RESERVED WORDS */
<notCons>       ::= "c" <notAnotO> <idChars>*
                | "c" "o" <notN> <idChars>*
                | "c" "o" "n" <notS> <idChars>*
                | "c" "o" "n" "s" <idChars>+
                | "c"
                | "c" "o"
                | "c" "o" "n"
<notHead>       ::= "h" <notE> <idChars>*
                | "h" "e" <notA> <idChars>*
                | "h" "e" "a" <notD> <idChars>*
                | "h" "e" "a" "d" <idChars>+
                | "h"
                | "h" "e"
                | "h" "e" "a"
<notTail>       ::= "t" <notAnotR> <idChars>*
                | "t" "a" <notI> <idChars>*
                | "t" "a" "i" <notL> <idChars>*
                | "t" "a" "i" "l" <idChars>+
                | "t"
                | "t" "a"
                | "t" "a" "i"
<notIf>         ::= "i" <notF> <idChars>*
                | "i" "f" <idChars>+
                | "i"
<notLet>        ::= "l" <notAnotE> <idChars>*
                | "l" "e" <notT> <idChars>*
                | "l"
                | "l" "e"
<notLetrec>     ::= "l" <notAnotE> <idChars>*
                | "l" "e" <notT> <idChars>*
                | "l" "e" "t" <notR> <idChars>*
                | "l" "e" "t" "r" <notE> <idChars>*
                | "l" "e" "t" "r" "e" <notC> <idChars>+
                | "l" "e" "t" "r" "e" "c" <idChars>+
                | "l"
                | "l" "e" 
                | "l" "e" "t" "r" 
                | "l" "e" "t" "r" "e"
<notLambda>     ::= "l" <notAnotE> <idChars>*
                | "l" "a" <notM> <idChars>*
                | "l" "a" "m" <notB> <idChars>*
                | "l" "a" "m" "b" <notD> <idChars>*
                | "l" "a" "m" "b" "d" <notA> <idChars>*
                | "l" "a" "m" "b" "d" "a" <idChars>+
                | "l" 
                | "l" "a" 
                | "l" "a" "m" 
                | "l" "a" "m" "d"
<notCall>       ::= "c" <notAnotO> <idChars>*
                | "c" "a" <notL> <idChars>*
                | "c" "a" "l" <notL> <idChars>*
                | "c" "a" "l" "l" <idChars>+
                | "c" 
                | "c" "a" 
                | "c" "a" "l"
<notTrue>       ::= "t" <notAnotR> <idChars>*
                | "t" "r" <notU> <idChars>*
                | "t" "r" "u" <notE> <idChars>*
                | "t" "r" "u" "e" <idChars>+
                | "t" 
                | "t" "r" 
                | "t" "r" "u"
<notFalse>      ::= "f" <notA> <idChars>*
                | "f" "a" <notL> <idChars>*
                | "f" "a" "l" <notS> <idChars>*
                | "f" "a" "l" "s" <notE> <idChars>*
                | "f" "a" "l" "s" "e" <idChars>+
                | "f" 
                | "f" "a" 
                | "f" "a" "l" 
                | "f" "a" "l" "s"   

/* TUDO */
<notReserved>      ::= ( "a" | "b" | "d" | "e" | "g" | "j" | "k" | [m-s] | [u-z] ) <idChars>*
                | <notCons>
                | <notHead>
                | <notTail>
                | <notIf>
                | <notLet>
                | <notLetrec>
                | <notLambda>
                | <notCall>
                | <notTrue>
                | <notFalse>


/* NOT LETTERS*/
<notI>          ::= [a-h] | [j-z] | [0-9] | [A-Z]
<notF>          ::= [a-e] | [g-z] | [0-9] | [A-Z]
<notC>          ::= [a-b] | [d-z] | [0-9] | [A-Z]
<notO>          ::= [a-n] | [p-z] | [0-9] | [A-Z]
<notN>          ::= [a-m] | [o-z] | [0-9] | [A-Z]
<notS>          ::= [a-r] | [t-z] | [0-9] | [A-Z]
<notH>          ::= [a-g] | [i-z] | [0-9] | [A-Z]
<notE>          ::= [a-d] | [f-z] | [0-9] | [A-Z]
<notA>          ::= [b-z] | [0-9] | [A-Z]
<notD>          ::= [a-c] | [e-z] | [0-9] | [A-Z]
<notT>          ::= [a-s] | [u-z] | [0-9] | [A-Z]
<notU>          ::= [a-t] | [v-z] | [0-9] | [A-Z]
<notL>          ::= [a-k] | [m-z] | [0-9] | [A-Z]
<notR>          ::= [a-q] | [s-z] | [0-9] | [A-Z]
<notB>          ::= "a" | [c-z] | [0-9] | [A-Z]
<notM>          ::= [a-l] | [n-z] | [0-9] | [A-Z]
<notAnotE>      ::= [b-d] | [f-z] | [0-9] | [A-Z] 
<notAnotR>      ::= [b-q] | [s-z] | [0-9] | [A-Z] 
<notAnotO>      ::= [b-n] | [p-z] | [0-9] | [A-Z]

<character>     ::= <letter> | <digit> | <symbol>
<letter>        ::= [a-z] | [A-Z] 
<digit>         ::= [0-9]
<maiusculas>    ::= [A-Z]
<intnum>        ::= <digit>+
<number>        ::= <intnum> | <intnum> "." <intnum>
<other_symb>    ::=  "_" | "! " | "?" | "<" | ">" | "#" | "%"
<reserv_symb>   ::=   "(" | ")" | "+" | "-" | "*" | "~" 
<symbol>        ::=  <reserv_symb> | <other_symb>
<reserv_word>   ::=  "cons" | "head" | "tail" | 
                     "if" | "let" | "letrec" | 
                     "lambda" | "call" 
<reservedW>     ::=  <reserv_symb> | <reserv_word>

<id>            ::= <notReserved> | <maiusculas> <idChars>*


/* -- Operadores Aritméticos -- */
<op_arith_bin> ::= " + " | " - " | " * " | " % " 
<op_arith_un>  ::= " ~ "

/* -- Expressões Aritméticas -- */
<arith_expr> ::= "(" <exprA_bin> ")" | "(" <exprA_un> ")" | <number>
<exprA_bin>  ::= <op_arith_bin> <code> " " <code>
<exprA_un>   ::= <op_arith_un> <code> 


/* -- Operadores Listas -- */
<op_list>      ::= "head " | "tail "

/* -- Expressões sobre listas -- */
<list_expr>  ::= <cons> | "(" <exprL>  ")"
<cons>       ::= "(cons " <code> " " <code> ")"
<exprL>      ::= <op_list>  <code> 


/* -- Expressões Lambda (definição e aplicação de funções) -- */
<lamb_expr> ::=  <lambda> | <call> 
<lambda>    ::= "(lambda " <param> " "  <code> ")"
<param>     ::= <id>
<call>      ::= "(call " <lambda> " " <code> ")"

/* -- expressões if -- */
/* MODIFICAÇÃO: IF */
<cond>  ::= <code>  | <bool>

<if>    ::= "if " <cond>  " " <pos>  " " <neg> 
<pos>   ::= <code>
<neg>   ::= <code>

/* -- expressões let  -- */         
<let_expr>  ::=  <let> | <letrec> 
<let>       ::= "(let " <id> " "  <def>  " " <body> ")"
<letrec>    ::= "(letrec " <id> " "  <lambda>  " " <body> ")"
<def>       ::= <code>
<body>      ::= <code>


/* -- Código do programa -- */
<code>  ::=  <expr> | <number>

<expr>  ::=  <arith_expr> | <list_expr> | <lamb_expr> | <if> | <let_expr>


/* -- expressões quote -- */
<quote>     ::=  <code> | <id>
