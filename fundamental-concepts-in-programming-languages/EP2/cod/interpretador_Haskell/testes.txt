-- let - utilizado para dar nomes a alguns elementos 
(let um 1 (+ um 5))                           -- nome para um literal
(let ? 1 (+ ? 5))                               -- símbolo para um literal
(let ! 1 (+ ! 5))                               -- símbolo para um literal
(let 13 1 (+ 13 5))                             -- símbolo para um literal - veja o símbolo e a execução...
(let if 1 (+ if 5))                             -- palavras reservadas podem ser sobrecarregadas localmente
(let + 1 (+ + 5))                               -- os símbolos podem ser sobrecarregados
(let ~ 1 (+ ~ 5))                               -- os símbolos podem ser sobrecarregados
(let addnum (+ 12 13) (+ addnum 5))             -- nome para uma expressão aritmética
(let maisum (lambda x (+ x 1)) (call maisum 5)) -- nome para uma expressão lambda
(letrec fatorial (lambda x (if x (* x (call fatorial (- x 1))) 1)) (call fatorial 5))

------- NOVOS TESTES -------
-- palavras reservadas
(let call 1 (+ call 2))
(let let 1 (+ call 2))
(let letrec 1 (+ call 2))
(let quote 1 (+ call 2))
(let lambda 1 (+ call 2))
(let false 1 (+ false 5))
(let 23call 1 (+ 23call 2))

-- palavras com númerps
(let 1abc 1 (+ 1abc 2))
(let abc123 1 (+ abc123 2))
(let variavel 1 (+ variavel 2))
(letrec 21 (lambda x (if x (* x (call 21 (- x 1))) 1)) (call 21 5))
(let 13 1 (+ 13 2))
(call (lambda 2 (+ 2 5)) 8) 
(let 3.14 1 (+ 3.14 2))
(letrec 9 (lambda x (if x (* x (call 9 (- x 1))) 1)) (call 9 5))

-- palavras com símbolos
(let ?um 1 (+ ?um 5))
(call (lambda ?ma5ia (+ ?ma5ia 5)) 8) 
(call (lambda ~ (+ ~ 5)) 8) 
(let a@b 1 (+ a@b 5))
(let a#b 1 (+ a#b 5))

-- operadores booleanos
(if true (+ 1 2) (+ 10 20))
(if (if true (+ 1 2) (+ 10 20)) (+ 100 200) (+ 10 20))
(if false (+ 1 2) (% 50 10))
(if (== 8 8) (+ 1 2) (% 50 10))
